#include <iostream>
#include <fstream>
#include <string>
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <iterator>
#include "color.h"
#include "vec3.h"
#include "ray.h"
#include "rtweekend.h"

#include "color.h"
#include "hittable_list.h"
#include "sphere.h"
#include "camera.h"


using namespace std;

int w, h;




color ray_color(const ray& r, const hittable& world) {
    hit_record rec;
    if (world.hit(r, 0, infinity, rec)) {
        return 0.5 * (rec.normal + color(1, 1, 1));
    }
    vec3 unit_direction = unit_vector(r.direction());
    auto t = 0.5 * (unit_direction.y() + 1.0);
    return (1.0 - t) * color(1.0, 1.0, 1.0) + t * color(0.5, 0.7, 1.0);
}


int main()
{


    std::ifstream inFile("text.txt");
    if (inFile)
    {
        std::string line{};
        while (getline(inFile, line))
        {
            if (inFile)
            {
                char found = line[0];
                //printf("testing this %c\n", found);
               // printf("%s\n", line.c_str());
                if (found == 'I')
                {


                    std::istringstream buf(line);
                    std::istream_iterator<std::string> beg(buf), end;

                    std::vector<std::string> tokens(beg, end); // done!

                    int counter = 0;
                    for (auto& s : tokens) {
                        if (counter == 1) {
                            stringstream geek(s);
                            geek >> w;
                        }
                        else if (counter == 2) {
                            stringstream geek(s);
                            geek >> h;
                        }
                        counter++;
                    }

                    //printf("image %d, %d\n", w, h);

                }
                else if (found == 'P')
                {
                    //printf("pixel size\n");

                }
                else if (found == 'M')
                {
                    //printf("max number of bounces\n");

                }
                else if (found == 'B')
                {
                    std::istringstream buf(line);
                    std::istream_iterator<std::string> beg(buf), end;

                    std::vector<std::string> tokens(beg, end); // done!

                    int counter = 0;
                    for (auto& s : tokens) {
                        if (counter == 1) {
                            stringstream geek(s);
                            geek >> w;
                        }
                        else if (counter == 2) {
                            stringstream geek(s);
                            geek >> h;
                        }
                        counter++;
                    }

                    //printf("box\n");

                }
                else if (found == 'S')
                {
                    //printf("sphere\n");

                }
                else if (found == 'L')
                {
                    //printf("light\n");

                }
                else
                {
                    //std::cout << "No letters on this line \n";
                }
            }
        }
    }
    else
    {
        std::cerr << "Unable to open file \n";
    }





    // Image

    const auto aspect_ratio = 16.0 / 9.0;
    const int image_width = 400;
    const int image_height = static_cast<int>(image_width / aspect_ratio);
    const int samples_per_pixel = 100;

    // World
    hittable_list world;
    world.add(make_shared<sphere>(point3(0, 0, -1), 0.5));
    world.add(make_shared<sphere>(point3(0, -100.5, -1), 100));

    // Camera

    camera cam;

    // Render

    std::cout << "P3\n" << image_width << ' ' << image_height << "\n255\n";

    for (int j = image_height - 1; j >= 0; --j) {
        std::cerr << "\rScanlines remaining: " << j << ' ' << std::flush;
        for (int i = 0; i < image_width; ++i) {
            color pixel_color(0, 0, 0);
            for (int s = 0; s < samples_per_pixel; ++s) {
                auto u = (i + random_double()) / (image_width - 1);
                auto v = (j + random_double()) / (image_height - 1);
                ray r = cam.get_ray(u, v);
                pixel_color += ray_color(r, world);
            }
            write_color(std::cout, pixel_color, samples_per_pixel);
        }
    }

    std::cerr << "\nDone.\n";






}
